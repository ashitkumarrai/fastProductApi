to<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>fastProductApi</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>fastProductApi</name>
	<description>High-Performance CRUD APIs Leveraging Redis and MySQL</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.retry</groupId>
			<artifactId>spring-retry</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>



function generateSgtToken() {
    // Get current date in Singapore Time (SGT is UTC+8)
    const now = new Date();
    const sgtOffset = 8 * 60 * 60 * 1000;
    const sgtTime = new Date(now.getTime() + sgtOffset);
    
    // Format as DDMMYYYYHHMMSS (14 digits)
    const day = String(sgtTime.getUTCDate()).padStart(2, '0');
    const month = String(sgtTime.getUTCMonth() + 1).padStart(2, '0');
    const year = sgtTime.getUTCFullYear();
    const hours = String(sgtTime.getUTCHours()).padStart(2, '0');
    const minutes = String(sgtTime.getUTCMinutes()).padStart(2, '0');
    const seconds = String(sgtTime.getUTCSeconds()).padStart(2, '0');
    
    // Create timestamp portion
    const timestampPart = `${day}${month}${year}${hours}${minutes}${seconds}`;
    
    // Generate 2 random digits (00-99)
    const randomPart = String(Math.floor(Math.random() * 100)).padStart(2, '0');
    
    // Combine to make 16 digits
    return timestampPart + randomPart;
}

// Example usage
const token = generateSgtToken();
console.log('Generated token:', token); // e.g. "2405202509345298" (DDMMYYYYHHMMSSRR)
